(* ============================================================ *)
(* ==        合併模組 Part 3: 物品與裝備 (Items & Gear)       == *)
(* ============================================================ *)

(* === Content from: 🧰 裝備系統模組（equipment.ml）.ini (Part 1: Equipment) === *)
[source: 196] # 🧰 裝備系統模組（equipment.ml）

📘 模組說明：
本模組管理所有可裝備物品之互動邏輯，包括裝備位置、使用條件、耐久機制、品質、重量限制與戰鬥聯動等。確保角色無法憑空創造道具或無視真實限制使用裝備。

---

## ⚙️ 裝備基本邏輯

let equipment_rules = {
  "使用限制" = [
    "所有裝備必須實際存在於角色身上或背包內方可使用";
    "需明確執行【裝備】指令才能生效";
    "戰鬥時未裝備視同無法使用該物品"
  ];
  "互動命令" = {
    "[裝備]" = "從背包或掛載區裝備到指定部位";
    "[取下]" = "將裝備卸下並移至背包";
    "[使用]" = "執行裝備特定行動（需已裝備）";
    "[丟棄]" = "將裝備永久移除（可設定是否可回收）"
  };
}
;;

---

## 🧭 裝備部位分類

let equipment_slots = {
  "主手" = ["單手劍"; "刀"; "斧"; "錘"; "匕首"; "工具類"]; (* 擴充武器類型 *)
  "副手" = ["盾牌"; "火把"; "副手武器(需技能)"; "空手(用於施展部分拳腳)"]; (* 擴充 *)
  "身體" = ["內甲/襯衣"; "外袍/衣褲"; "盔甲(皮甲/鐵甲/重甲)"]; (* 細化 *)
  "頭部" = ["帽子/頭巾"; "頭盔/護頭"]; (* 細化 *)
  "手部" = ["護腕"; "手套"];
  "腳部" = ["鞋靴(草鞋/布鞋/皮靴)"]; (* 細化 *)
  "飾品" = ["戒指"; "項鍊"; "護符"; "腰帶?"]; (* 擴充 *)
  "掛載區" = ["背後(掛載長兵器/弓/包裹)"; "腰間(掛載刀劍/錢袋/水袋/工具袋)"]; (* 細化 *)
  "背包" = ["儲存未裝備物品（取用有延遲）"];
}
;;

---

## 🧱 耐久度與損耗系統

let equipment_durability = {
  "耐久上限" = 100.0; (* 使用浮點數更精確 *)
  "損耗機制" = [
[source: 197]    "【武器】: 每次攻擊命中/格擋時，根據攻擊強度、對方護甲、武器品質損耗。特殊招式消耗更大。";
    "【護甲/盾牌】: 每次成功防禦/承受傷害時，根據傷害類型、強度、自身品質損耗。";
    "【工具】: 每次使用時，根據操作難度、對象材質、工具品質損耗。";
    "【衣物/鞋靴】: 長時間穿著、惡劣天氣、劇烈活動、受傷時緩慢損耗。";
  ];
  "損耗計算(概念)" = "基礎損耗值 * 強度因子 * 材質因子 * (1 / 品質因子)";
  "耐久為0" = "裝備損壞，失去主要功能（如武器傷害大減/無法格擋，護甲失效），可能徹底毀壞無法修復。";
  "修理規則" = "需特定 NPC（鐵匠/皮匠/巧匠）、工作站、消耗材料（如金屬/皮革/木材/磨刀石）和時間。修理成功率/效果受技能等級和材料影響。部分神器或特殊物品可能無法修理或需要特殊方法。";
}
;;

---

## 🪙 裝備品質分級

(* 與 item_consumable_system.ml 共用定義，確保一致 *)
type item_quality =
  | Rough     (* 粗糙 *)
  | Common    (* 普通 *)
  | WellMade  (* 精良 *)
  | Rare      (* 稀有 *)
  | Legendary (* 傳說 *)
  | Artifact  (* 神器 *)
;;

let equipment_quality_effects = {
  description = "品質越高，通常意味著...";
  effects = [
    "更高的基礎屬性 (攻擊力、防禦力、效果值)";
    "更高的耐久度上限和更慢的損耗速度";
    "更低的重量？(視材質)";
    "可能附帶額外的特殊效果或屬性加成";
    "更高的修理難度和成本";
    "更高的交易價值";
  ];
}
;;

---

## 🚫 使用條件限制

let equipment_restrictions = {
  "負重限制" = "角色總負重（背包+裝備）不能超過基於力量(STR)計算的最大負重上限 (`inventory_system.ml` 或 `character_attributes.ml` 定義)";
  "技能需求" = [
    "部分高級武器/護甲需要對應的【兵刃/護具】技能達到一定等級才能發揮全部效果或避免懲罰 (如攻擊失誤率增加)。";
    "【雙持武器】需要專門的技能支持。";
    "【重型盔甲】可能需要額外的【負重訓練】或高力量才能避免敏捷懲罰。";
  ];
  "門派/身份限制" = [
    "特定裝備為門派獨有（如打狗棒、真武劍），非本門弟子無法使用或使用會引發敵意。";
    "某些物品可能需要特定身份或地位才能裝備（如官服、掌門信物）。";
  ];
  "特殊/神器限制" = [
    "神器類裝備通常需要完成特定任務、通過考驗、或滿足特殊條件（如血脈、內力屬性、道德值）才能認主或激活其真正力量。";
  ];
  "體型/種族限制" = "(可選) 某些裝備可能只適合特定體型或種族。";
  "部位限制" = "雙手武器佔用主副手；部分大型物品只能掛載在背後等。";
}
;;

---

## 🎯 戰鬥與模組聯動

let equipment_module_integration = {
  "combat_system_wuxia.ml" = "裝備屬性（攻擊力、防禦力、破甲、格擋值、速度修正等）直接參與戰鬥計算；武器決定可用招式類型；特殊效果（中毒、燃燒）通過裝備觸發。";
  "skills_proficiency.ml" = "技能等級影響裝備使用效果和解鎖條件；使用裝備可以獲得相關技能經驗。";
  "npc_stats_tracker.ml" = "追蹤記錄 NPC 的裝備情況，影響其戰鬥力和行為。";
  "reputation_system_comprehensive.ml" = "特定裝備（如門派服飾、官服、著名神兵）會影響 NPC 對玩家的態度和陣營關係。";
  "inventory_system.ml" = "裝備的獲取、存放、重量計算。";
  "crafting_gathering_system.ml" = "製作和修理裝備。";
}
;;

---

## 🧩 擴充建議模組欄位（如未啟用可略）

let equipment_expansion_options = {
  binding_rules = ["拾取綁定", "裝備綁定", "任務綁定", "靈魂綁定(神器?)"]; (* 影響交易/丟棄 *)
  enchantment_slots = "允許嵌入符文、寶石或進行附魔，提供額外屬性或特效。";
  set_bonuses = "裝備同一套裝的多個部件可激活額外套裝效果。";
  weapon_effects = ["流血", "中毒", "燃燒", "冰凍", "麻痺", "擊退", "吸血", "破甲", "內力擾亂"]; (* 可通過武器自帶或附魔/淬毒實現 *)
  appearance_customization = "(可選) 允許更換裝備外觀而不改變屬性（幻化）。";
}
;;

(* === End of Equipment System definition === *)


(* === Content from: 🧰 裝備系統模組（equipment.ml）.ini (Part 2: Item/Consumable System) === *)
(* Note: The source file seems to combine both, this marks the start of the second logical module *)

# 📦 物品與道具系統模組 (item_consumable_system.ml)

## 📘 模組說明
本模組負責管理遊戲中所有非裝備類的物品，特別是消耗品（如丹藥、食物、材料、符咒等）以及任務相關物品。它定義了物品的屬性、效果、堆疊規則、使用邏輯，並與背包/庫存系統緊密關聯。

---

## 📌 物品核心定義 (Item Definition Structure)
```ml
(* 基本物品類型 *)
type item_category =
  | Drug        (* 藥品 *)
  | Food        (* 食物 *)
  | Drink       (* 酒水 *)
  | Material    (* 材料 *)
  | Junk        (* 雜物 *)
  | QuestItem   (* 任務物品 *)
  | Talisman    (* 符咒 *)
  | Poison      (* 毒藥 *)
  | Book        (* 書籍/秘籍 *)
  | Tool        (* 工具 (非裝備部位的) *)
  | Container   (* 容器 (如空瓶子) *)
  | CurrencyItem (* 特殊貨幣物品, 如寶石? *)
  | Unknown
;;

(* 物品效果定義 *)
type item_effect = {
  effect_type: string; (* e.g., "恢復HP", "施加狀態", "學習技能", "觸發事件" *)
  target: string;      (* e.g., "使用者", "目標NPC", "區域" *)
  value: string option; (* 效果數值, e.g., "30", "50%", "技能ID" *)
  status: string option; (* 狀態名稱, e.g., "止血", "中毒" *)
  duration: string option; (* 效果持續時間, e.g., "2回合", "永久" *)
  condition: string option; (* 觸發效果的條件, e.g., "戰鬥中" *)
};;

(* 物品定義結構 *)
type item_definition = {
  item_id: string; (* 系統內部唯一識別碼 *)
  name_cn: string; (* 名稱 *)
  category: item_category; (* 類型 *)
  description: string; (* 描述 *)
  weight: float; (* 重量 *)
  stackable: bool; (* 可堆疊 *)
  max_stack: int; (* 最大堆疊 *)
  base_value: int; (* 基礎價值 (文) *)
  quality: item_quality option; (* 品質/稀有度 *)
  effects: item_effect list; (* 效果列表 *)
  usage_conditions: string list; (* 使用條件 *)
  duration_rounds: int option; (* 物品本身效果持續回合? (較少用) *)
  consumable_type: [`Yes | `No | `Charges of int]; (* 消耗性 *)
  binding_type: string; (* 綁定類型: "無", "拾取", "裝備", "任務" *)
  special_tags: string list; (* 特殊標籤 *)
  spoilage_mechanism: (string * int * string) option; (* (週期單位, 速率, 變質後物品ID) *)
};;

(* (概念性) 物品資料庫 *)
module ItemMap = Map.Make(String);;
let item_database : item_definition ItemMap.t ref = ref ItemMap.empty;;

(* 範例: 金創藥 *)
let jinchuangyao_example : item_definition = {
  item_id = "jin_chuang_yao_01"; name_cn = "金創藥"; category = Drug;
  description = "常見的外傷藥，用於止血生肌。"; weight = 0.1;
  stackable = true; max_stack = 20; base_value = 50; quality = Some Common;
  effects = [
    { effect_type="恢復HP"; target="使用者"; value=Some "30"; status=None; duration=None; condition=None };
    { effect_type="施加狀態"; target="使用者"; value=None; status=Some "止血"; duration=Some "2回合"; condition=None }
  ];
  usage_conditions = ["狀態 != 戰鬥中"]; (* 假設基礎金創藥戰鬥外使用 *)
  duration_rounds = None; consumable_type = `Yes; binding_type = "無";
  special_tags = ["外傷藥", "基礎藥品"]; spoilage_mechanism = None;
};;
(* let () = item_database := ItemMap.add jinchuangyao_example.item_id jinchuangyao_example !item_database;; *)

(* 範例: 乾糧 *)
let dry_ration_example : item_definition = {
  item_id = "ration_basic"; name_cn = "乾糧"; category = Food;
  description = "耐放的乾硬食物，能勉強填飽肚子。"; weight = 0.5;
  stackable = true; max_stack = 10; base_value = 5; quality = Some Common;
  effects = [
    { effect_type="恢復飢餓"; target="使用者"; value=Some "30"; status=None; duration=None; condition=None };
    { effect_type="恢復STA"; target="使用者"; value=Some "10"; status=None; duration=None; condition=None }; (* 吃東西也能恢復少量體力 *)
  ];
  usage_conditions = []; duration_rounds = None; consumable_type = `Yes; binding_type = "無";
  special_tags = ["食物"]; spoilage_mechanism = Some ("天", 5, "spoiled_ration_01"); (* 5% 概率每天變質 *)
};;
(* let () = item_database := ItemMap.add dry_ration_example.item_id dry_ration_example !item_database;; *)

🎒 背包/庫存系統規則 (Inventory System Rules)
let inventory_rules = {
  capacity_mode = "Weight"; (* 容量限制模式: Weight | Slots | Combined *)
  calculate_max_weight = (fun (str: int) -> float_of_int str *. 1.5 +. 10.0); (* 最大負重公式 (kg) = 力量 * 1.5 + 10 *)
  max_slots = 20; (* (若使用格子模式) *)
  storage_format = "Map(itemID -> quantity)"; (* 物品儲存格式 *)
  currency_independent = true; (* 貨幣通常不佔負重或格子 *)
  overburdened_effects = [ (* 超重效果 *)
    ("超重1級 (101-120%)", "敏捷(AGI) -2, 移動速度降低 20%, 無法奔跑, 體力消耗增加 15%");
    ("超重2級 (121%+)", "敏捷(AGI) -5, 移動速度降低 50%, 無法奔跑/跳躍/潛行, 無法進行戰鬥動作, 體力消耗增加 30%");
  ];
}
;;

🖱️ 玩家互動指令 (Player Interaction Commands)
let item_player_commands = [
  "[查看物品欄]"; "[整理背包]";
  "[使用] [物品名稱] (對 [目標])"; (* 目標可選，預設自己 *)
  "[丟棄] [物品名稱] (數量)";
  "[給予] [物品名稱] (數量) [NPC名稱]";
  "[檢查] [物品名稱]"; (* 查看詳細描述 *)
  "[拆分堆疊] [物品名稱] [數量]";
  "[全部存入] [容器名稱]"; (* 如存入倉庫 *)
  "[全部取出] [容器名稱]";
]
;;

⚙️ 物品使用流程 (Item Usage Flow)
let item_usage_flow = """
  1. 檢查物品是否在玩家庫存中，數量是否足夠。
  2. 檢查是否滿足所有「使用條件」(usage_conditions)。
  3. 檢查目標是否有效 (若效果需要指定目標)。
  4. 執行「效果列表」(effects) 中的所有效果，調用相關模組處理 (如恢復HP -> character_attributes.ml, 施加狀態 -> disease_injury_system.ml)。
  5. 若物品是消耗性的 (consumable_type)，從庫存中移除或減少數量/使用次數。
  6. (可選) 觸發相關技能經驗增長 (如使用藥品+醫術EXP)。
  7. (可選) 觸發物品或同類物品的冷卻時間。
"""
;;

✨ 物品效果類型範例 (Example Effect Types)
let item_effect_type_examples = [
  "恢復HP / MP / STA / SAN";
  "扣除HP / MP / STA / SAN";
  "施加狀態 (中毒, 止血, 加速, 內力紊亂, 屬性增強...)";
  "移除狀態 (解毒, 移除負面效果...)";
  "觸發事件 / 解鎖機關 (使用鑰匙, 信物)";
  "學習技能 / 配方 (閱讀秘籍/圖紙)";
  "改變屬性 (永久 / 暫時)";
  "改變關係 / 聲望 (送禮)";
  "影響生存狀態 (減少飢餓/口渴)";
  "修復裝備耐久度 (使用修理工具)";
  "點燃 / 熄滅火焰 (使用火種/水)";
  "生成光照";
]
;;

🔗 依賴模組 (Dependencies)
let item_consumable_depends_on = [
  "character_attributes.ml";      (* HP/MP/屬性/狀態 *)
  "survival_status.ml";           (* 飢餓/口渴/疲勞 *)
  "disease_injury_system.ml";     (* 藥品/毒藥/傷病狀態 *)
  "combat_system_wuxia.ml";       (* 戰鬥中使用物品 *)
  "skills_proficiency.ml";        (* 使用物品的技能需求/經驗獲取 *)
  "equipment.ml";                 (* 配合裝備使用的物品 *)
  "quest_event_system.ml";        (* 任務物品 *)
  "npc_stats_tracker.ml";         (* NPC物品欄/送禮目標 *)
  "world_settings.ml";            (* 時間影響腐壞 *)
  "reputation_system_comprehensive.ml"; (* 送禮影響關係/聲望 *)
  "emotion_psychology.ml";        (* 酒/藥物影響情緒 *)
]
;;

(* ============================================================ *)
(* ==       合併模組 Part 3: 物品與裝備 (Items & Gear) 結束   == *)
(* ============================================================ *)