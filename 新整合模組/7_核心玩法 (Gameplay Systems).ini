(* ============================================================ *)
(* ==     合併模組 Part 7: 核心玩法 (Gameplay Systems)        == *)
(* ============================================================ *)

(* === Content from: ⚔️ 武俠戰鬥模組（combat_system_wuxia.ml）.ini === *)
[source: 1] # ⚔️ 武俠戰鬥模組（combat_system_wuxia.ml）

模組說明：
本模組用於管理角色間的戰鬥互動，支援近戰、遠程、內功、招式應用，並整合屬性、裝備、技能模組等要素，符合武俠世界觀邏輯。

---

## 📘 戰鬥流程階段

(* 簡化流程，實際判定更複雜 *)
let combat_flow = [
  "【起手/先攻判定】: 比較雙方敏捷(AGI)/輕功/感知/特殊技能/偷襲狀態，決定行動順序。";
  "【行動選擇】: 輪到行動的角色選擇動作（攻擊/防禦/移動/使用物品/施展技能/逃跑等）。";
  "【攻擊判定】:";
  "  - 選擇招式/普通攻擊。";
  "  - 計算命中值: `(攻擊方[相關技能] + 攻擊方[AGI]/3 + 武器命中修正 + d20) vs (防禦方[閃避基礎] + 防禦方[輕功]/2 + 裝備閃避修正 + d20)`。(公式可調整)";
  "【防禦判定】(若攻擊方命中檢定初步成功):";
  "  - 防禦方選擇反應 (格擋/閃避/招架/硬抗)。";
  "  - 計算防禦成功值: `(防禦方[對應技能] + 防禦方[AGI或STR]/4 + 裝備防禦修正 + d20)`。(公式可調整)";
  "  - 比較命中值與防禦成功值，判定最終是否命中以及防禦效果(完全格擋/部分格擋/閃避成功/招架成功/被擊中)。";
  "【傷害計算】(若命中且未被完全防禦):";
  "  - 基礎傷害: `(武器面板 + 攻擊方[STR或內力]/5 + 招式威力加成)`。(公式可調整)";
  "  - 傷害減免: `基礎傷害 * (1 - 防禦方護甲減傷率) * (1 - 防禦方內功減傷率?) * (1 - 格擋減傷率?)`。";
  "  - 最終傷害扣除 HP。";
  "【附加效果處理】: 根據招式/武器/毒藥觸發（內傷/流血/中毒/破甲/狀態效果等）。";
  "【狀態更新】: 更新雙方 HP/MP/STA/SAN/狀態/裝備耐久。";
  "【回合結束/下一位行動】: 根據先攻順序輪換。";
]
;;

---

## ⚙️ 判定項目一覽 (概念細化)

(* 判定細節需在 AI 執行時根據公式計算 *)
let combat_checks_overview = [
  ("命中判定", "主要受 [武器技能]、[敏捷(AGI)]、[輕功]、[觀察]、武器/招式特性、距離、光照、目標狀態 影響。");
  ("傷害判定", "主要受 [武器基礎傷害]、[力量(STR)/內力]、[武器技能]、[招式威力]、對方[護甲]、[內功護體]、[格擋效果] 影響。");
  ("破甲/破防", "依賴特定【招式效果】(如'破甲')、武器【鋒利度/穿透力】、或極高的【力量/內力】。成功則降低目標後續防禦力。");
  ("內傷判定", "通常由特定【內功招式】(如掌力/指力/音波功)或暴擊觸發。需進行額外判定（如攻擊方內力 vs 防禦方內力/根骨/護體內功），成功則施加【內力紊亂】或持續性負面效果。");
  ("閃避判定", "主要受 [輕功]、[敏捷(AGI)]、[步法技能]、地形、預判（觀察?）影響。");
  ("格擋/招架判定", "主要受 [兵器格擋技能]、[力量(STR)]、[武器/盾牌格擋值] 影響。招架成功可能觸發反擊。");
  ("特殊效果抵抗判定", "如中毒、麻痺、恐懼等，通常需要進行基於 [體質/根骨]、[內力]、[意志力/SAN] 或特定 [抗性技能/物品] 的抵抗檢定。");
]
;;

---

## 🔥 戰鬥技能與特效範例

(* 具體技能定義參見 skills_proficiency.ml *)
let combat_skill_example = {
  skill_id = "example_qi_burst_palm";
  name_cn = "氣爆掌 (範例)";
  prerequisites = ["內力 30+", "掌法 Lv4+"];
  effects = ["擊退目標(近距離)", "造成內傷(低機率)", "對非金屬護甲造成額外損害(低機率)"];
  cost = "MP 30, STA 15";
  cooldown = "2 回合";
}
;;

🛡️ 防禦與反制選項
```ml
let defensive_options = [
  "[格擋] (Block)": "使用武器/盾牌硬接，消耗STA，成功率受STR/技能影響，可減少部分傷害。";
  "[閃避] (Dodge)": 依靠身法移動躲開，消耗STA/MP(若用輕功)，成功率受AGI/輕功/地形影響，成功則完全不受傷害。";
  "[招架] (Parry)": 精準格擋，需高技能/預判，成功可能完全格擋並獲得反擊機會。";
  "[卸力] (Yield/Redirect)": (需特定內功) 化解部分內力攻擊，減少內傷。";
  "[硬抗] (Tank)": 不做防禦，依靠護甲/體魄承受傷害。";
]
;;

let counter_options = [
  "[反擊] (Counter-Attack)": "成功招架/閃避後觸發，立即對敵人進行一次快速攻擊。";
  "[借力打力] (Borrow Force)": (需特殊內功) 成功卸力後，將部分攻擊力量反彈給對手。";
]
;;

❤️ 狀態影響戰鬥
let status_effects_in_combat = [
  "【內傷】": "降低MP恢復/上限，部分內功招式無法施展或威力下降，可能隨機岔氣。";
  "【中毒】": "持續損失HP/MP/SAN，或降低屬性(STR/AGI/INT)。";
  "【流血】": "持續損失HP，不包紮會加劇，影響STA恢復。";
  "【疲勞】": "降低命中、閃避、格擋成功率，增加技能STA/MP消耗。";
  "【恐懼】": "降低攻擊意願，增加逃跑機率，檢定成功率下降。";
  "【憤怒】": "提高攻擊力/意願？但降低防禦/理智判斷。";
  "【受傷部位】": "(若啟用部位傷害) 手臂受傷影響武器使用，腿部受傷影響移動/閃避。";
]
;;

🔗 關聯模組建議
let combat_depends_on = [
  "character_attributes.ml";      (* 屬性影響攻防判定 *)
  "skills_proficiency.ml";        (* 技能等級影響招式/命中/傷害 *)
  "equipment.ml";                 (* 武器/護甲直接影響攻防數值 *)
  "disease_injury_system.ml";     (* 處理戰鬥造成的狀態 *)
  "item_consumable_system.ml";    (* 戰鬥中使用藥品/暗器 *)
  "world_settings.ml";            (* 地形/天氣影響 *)
  "ai_behavior_system.ml";        (* NPC 的戰鬥決策傾向 *)
  "emotion_psychology.ml";        (* 情緒影響戰鬥表現 *)
]
;;

🛠️ 製作與採集系統模組 (crafting_gathering_system.ml)
🌳 資源採集系統 (Gathering System)
資源點定義 (Resource Node Definition)
(* 資源點類型 *)
type resource_node_category = Mineral | Herb | Wood | Fish | Hunt | SpecialNode;;

(* 產出物品結構 *)
type node_output = {
  item_id: string;
  quantity_roll: string; (* e.g., "1d3", "1" *)
  probability: float; (* 0.0 - 1.0 *)
  is_primary: bool;
};;

(* 資源點定義 *)
type resource_node_definition = {
  node_id: string;
  name_cn: string;
  category: resource_node_category;
  locations: string list; (* 可能出現的地點類型/區域ID *)
  required_tool_tags: string list; (* 需要的工具標籤 *)
  required_skill: string; (* 需要的技能ID *)
  min_skill_level: int;
  outputs: node_output list; (* 產出列表 *)
  gather_time_minutes: int; (* 採集時間 (分鐘) *)
  respawn_time_minutes: int; (* 重生時間 (分鐘) *)
  depletion_type: [`Count | `Time | `Never]; (* 枯竭機制 *)
  max_gather_count: int option; (* 最大採集次數 *)
  special_conditions: string list option; (* 特殊條件 *)
};;

(* (概念性) 資源點資料庫 *)
module ResourceNodeMap = Map.Make(String);;
let resource_node_database : resource_node_definition ResourceNodeMap.t ref = ref ResourceNodeMap.empty;;

(* 範例: 鐵礦脈 *)
let iron_vein_example : resource_node_definition = {
  node_id = "iron_vein_01"; name_cn = "鐵礦脈"; category = Mineral;
  locations = ["山脈"; "洞穴"]; required_tool_tags = ["鶴嘴鋤"];
  required_skill = "mining_basic"; min_skill_level = 1;
  outputs = [
    { item_id="iron_ore"; quantity_roll="1d3"; probability=0.8; is_primary=true };
    { item_id="stone"; quantity_roll="1d6"; probability=1.0; is_primary=false };
    { item_id="geode_common"; quantity_roll="1"; probability=0.05; is_primary=false }
  ];
  gather_time_minutes = 15; respawn_time_minutes = 120; (* 2小時重生 *)
  depletion_type = `Count; max_gather_count = Some 5; special_conditions = None;
};;
(* let () = resource_node_database := ResourceNodeMap.add iron_vein_example.node_id iron_vein_example !resource_node_database;; *)

採集流程 (Gathering Process)
let gathering_process = """
  1. 玩家指定目標資源點，發出採集指令。
  2. 檢查玩家是否裝備了所需工具標籤(required_tool_tags)對應的工具。
  3. 檢查玩家所需技能(required_skill)等級是否達標(min_skill_level)。
  4. 檢查資源點是否可採集（未枯竭/滿足特殊條件）。
  5. **成功率判定(可選):** `基礎成功率(e.g., 90%) + (玩家技能等級 - 最低技能等級) * 2% + 工具品質加成% + LCK加成%`。若失敗，可能無產出、產出減半或損壞工具。
  6. 若成功，根據產出列表(outputs)的機率和數量擲骰，添加物品到庫存（檢查負重）。
  7. 消耗採集時間(gather_time_minutes)。
  8. 更新資源點狀態（減少剩餘次數/進入重生計時）。
  9. 根據結果給予技能經驗值(EXP)。
"""
;;

🔨 物品製作系統 (Crafting System)
(* 配方所需材料結構 *)
type recipe_material = {
  item_id: string;
  quantity: int;
};;

(* 製作配方定義 *)
type crafting_recipe = {
  recipe_id: string;
  result_item_id: string;
  result_quantity: int;
  recipe_name: string option;
  required_skill: string; (* 技能ID *)
  min_skill_level: int;
  materials: recipe_material list;
  required_station_tag: string option; (* 需要的工作站標籤, e.g., "煉藥爐", "鐵匠鋪" *)
  crafting_time_minutes: int;
  learning_methods: string list option; (* 如何學會: "書籍", "NPC傳授", "技能解鎖", "探索", "領悟" *)
  quality_affected_by_skill: bool; (* 成品品質是否受技能影響 *)
};;

(* (概念性) 配方資料庫 *)
module RecipeMap = Map.Make(String);;
let recipe_database : crafting_recipe RecipeMap.t ref = ref RecipeMap.empty;;

(* 範例: 製作金創藥 *)
let recipe_jinchuangyao : crafting_recipe = {
  recipe_id = "recipe_jin_chuang_yao"; result_item_id = "jin_chuang_yao_01"; result_quantity = 1;
  recipe_name = Some "製作金創藥"; required_skill = "making_medicine"; min_skill_level = 2;
  materials = [ { item_id="herb_hemostatic"; quantity=3 }; { item_id="clean_water"; quantity=1 }; { item_id="linen_scrap"; quantity=1 } ];
  required_station_tag = Some "煉藥爐"; crafting_time_minutes = 30;
  learning_methods = Some ["書籍"; "NPC傳授"]; quality_affected_by_skill = true;
};;
(* let () = recipe_database := RecipeMap.add recipe_jinchuangyao.recipe_id recipe_jinchuangyao !recipe_database;; *)

製作流程 (Crafting Process)
let crafting_process = """
  1. 玩家選擇要製作的配方（需已學會）。
  2. 檢查玩家是否處於所需工作站(required_station_tag)附近（如果需要）。
  3. 檢查玩家所需技能(required_skill)等級是否達標(min_skill_level)。
  4. 檢查玩家庫存中是否有足夠的所需材料(materials)。
  5. 消耗所需材料。
  6. **成功率/品質判定(可選):**
     - 成功率: `基礎成功率 + (技能等級 - 最低等級)*修正 + 工具/工作站加成 + INT/LCK影響`。
     - 品質: 若`quality_affected_by_skill`為真，則根據`技能等級 + LCK + 隨機數`決定成品品質(粗糙/普通/精良...)。
     - 失敗可能無成品、材料損耗、產生劣質品。
  7. 若成功，將成品(result_item_id)及數量(result_quantity)（可能帶品質標籤）添加到庫存（檢查負重）。
  8. 消耗製作時間(crafting_time_minutes)。
  9. 根據結果給予技能經驗值(EXP)。
"""
;;

🔗 依賴模組 (Dependencies)
let crafting_gathering_depends_on = [
  "item_consumable_system.ml";    (* 提供材料、工具、成品定義 *)
  "skills_proficiency.ml";        (* 提供製作/採集技能等級、接收經驗 *)
  "world_settings.ml";            (* 資源點分布、時間影響重生 *)
  "character_attributes.ml";      (* 屬性影響判定 *)
  "construction_settlement.ml";   (* 建造工作站 *)
  "quest_event_system.ml";        (* 任務需求/獎勵配方 *)
  "npc_stats_tracker.ml";         (* NPC 服務/傳授 *)
  "inventory_system.ml";          (* 背包/負重 *)
]
;;

(* === End of Crafting & Gathering System definition === *)


(* === Content from: 💰 經濟與交易系統模組 (economy_trading_system.ml).ini === *)

# 💰 經濟與交易系統模組 (economy_trading_system.ml)

## 📘 模組說明
本模組負責定義遊戲世界中的貨幣體系、物品價值、交易規則以及影響交易價格的各種因素。它旨在模擬一個基礎的經濟環境，讓玩家可以通過買賣物品、完成任務、提供服務等方式與世界進行經濟互動。

---

## 🪙 貨幣體系 (Currency System)
```ml
let currency_system = {
  main_unit = "兩 (Silver Liang)";
  secondary_unit = "文 (Copper Wen)";
  tertiary_unit = Some "金 (Gold)"; (* 可選 *)
  conversion_rates = [("兩", 1000.0, "文"); ("金", 10.0, "兩")]; (* 1 兩 = 1000 文, 1 金 = 10 兩 *)
  storage_method = "CharacterStat"; (* 貨幣記錄在角色狀態中，不佔背包 *)
}
;;

💲 物品價值與定價 (Item Value & Pricing)
let pricing_rules = {
  base_value_source = "item_definition.base_value (in Copper Wen)"; (* 基礎價值來源於物品定義 *)
  merchant_markup_rate = (1.2, 1.5); (* 商人基礎加價率 120% ~ 150% *)
  merchant_purchase_rate = (0.5, 0.8); (* 商人基礎收購率 50% ~ 80% *)

  purchase_price_formula = "`BaseValue * MarkupRate * (1 - RelationDiscount - ReputationDiscount - SkillDiscount) * RegionPriceIndex`";
  sell_price_formula = "`BaseValue * PurchaseRate * (1 + RelationBonus + ReputationBonus + SkillBonus) * RegionPriceIndex * DurabilityModifier * QualityModifier`";

  durability_modifier = "(CurrentDurability / MaxDurability)"; (* 耐久度修正 *)
  quality_modifier = { (* 品質修正 (示例) *)
    Rough = 0.7; Common = 1.0; WellMade = 1.3; Rare = 2.0; Legendary = 5.0; Artifact = 10.0 (* 或更高/無法估價 *)
  };
}
;;

🏪 商人與交易規則 (Merchant & Trading Rules)
type merchant_profile = {
  npc_id: string;
  merchant_type: string; (* 雜貨/鐵匠/藥師... *)
  inventory_mode: [`Finite | `Infinite];
  inventory_items: (string * int) list option; (* (itemID, quantity) - 若有限模式 *)
  restock_frequency_days: int option; (* 刷新週期 *)
  capital_mode: [`Finite | `Infinite];
  current_capital: int option; (* 當前資金 (文) - 若有限模式 *)
  price_modifiers: (string * float) list option; (* (條件標籤, 修正率) - 特殊商人的個性定價 *)
};;

(* (概念性) 商人數據庫 *)
module MerchantMap = Map.Make(String);;
let merchant_database : merchant_profile MerchantMap.t ref = ref MerchantMap.empty;;

let trading_rules = {
  initiation = "與標記為『商人』的NPC對話，選擇交易選項。";
  interface_concept = "顯示 商人出售列表(含價格) 和 玩家背包中可出售物品列表(含預計收購價)。";
  transaction_process = "玩家確認買賣 -> 檢查玩家/商人資金 -> 轉移物品 -> 扣除/增加貨幣。";
}
;;

📈 價格影響因子 (Price Influencing Factors)
let price_influencing_factors = [
  ("討價還價技能", "來自 skills_proficiency.ml。技能等級提供買賣價格優化百分比。可能需對話觸發。");
  ("聲望/陣營關係", "來自 reputation_system。與商人陣營關係影響價格(友善折扣/敵對漲價/拒絕)。");
  ("個人關係", "來自 reputation_system。與商人NPC好感度影響價格。");
  ("物品狀態", "來自 item/equipment。耐久度/品質影響出售價格。");
  ("地區經濟(可選)", "來自 world_settings.ml。不同地區基礎物價/特產價格不同。");
  ("供需關係(可選)", "短期大量買賣影響價格；世界事件影響特定商品價格。");
]
;;

💬 玩家互動指令 (Player Interaction Commands)
let economy_player_commands = [
  "[交易] [NPC名稱]";
  "[查看商品]";
  "[購買] [物品名稱] (數量)";
  "[查看收購]"; (* (可選) *)
  "[出售] [物品名稱] (數量)";
  "[討價還價]"; (* (可選) *)
]
;;

💸 經濟活動類型 (Economic Activities)
let economic_activities = [
  "任務報酬"; "戰利品出售"; "買賣物品";
  "支付服務費用 (住宿/治療/修理/訓練...)";
  "(可選) 玩家提供服務賺錢 (護送/代工...)";
  "(可選) 稅收/費用"; "(可選) 賭博/小遊戲";
  "(可選) 偷竊/搶劫 (影響道德/聲望)";
]
;;

🔗 依賴模組 (Dependencies)
let economy_depends_on = [
  "item_consumable_system.ml";    (* 提供物品及其基礎價值 *)
  "equipment.ml";                 (* 提供裝備及其基礎價值/狀態 *)
  "skills_proficiency.ml";        (* 討價還價技能 *)
  "reputation_system_comprehensive.ml"; (* 聲望/陣營/個人關係 *)
  "npc_stats_tracker.ml";         (* 定義商人身份/庫存/資金 *)
  "quest_event_system.ml";        (* 任務報酬/涉及交易的任務 *)
  "world_settings.ml";            (* 地區經濟差異/世界事件 *)
  "character_attributes.ml";      (* 角色持有貨幣 *)
]
;;

(* === End of Economy & Trading System definition === *)


(* === Content from: 🏗️ 建築與據點模組 (construction_settlement.ml).ini === *)
[source: 132] # 🏗️ 建築與據點模組 (construction_settlement.ml)

## 📘 模組說明
本模組讓玩家能夠建造建築物、建立據點、升級設施，並與世界資源、生產、NPC 活動互動。適合長期經營型遊戲或開放式世界模擬。(注意：當前遊戲主要在黑風寨，此模組可能更多用於未來擴展或黑風寨內部設施改善)

---

## 🧱 建築邏輯與條件
```ml
type building_definition = {
  building_id: string;
  name_cn: string;
  description: string;
  category: string; (* e.g., "基礎", "生產", "防禦", "生活", "特殊" *)
  build_requirements: {
    materials: (string * int) list; (* (itemID, quantity) *)
    tools: string list option; (* 需要的工具標籤 *)
    skill: (string * int) option; (* (技能ID, 最低等級) *)
    location_tags: string list; (* 允許建造的地點標籤, e.g., ["平地", "寨內空地"] *)
    prerequisite_buildings: string list option; (* 前置建築ID *)
  };
  build_time_hours: float; (* 建造所需時間 (小時) *)
  durability: float option; (* 建築耐久度 *)
  upgrades_to: string option; (* 可升級成的建築ID *)
  provides_functionality: string list; (* 提供的功能標籤, e.g., ["休息點", "儲物", "工作站:煉藥", "防禦加成"] *)
  npc_interaction_point: bool; (* 是否可作為NPC工作/活動點 *)
};;

(* (概念性) 建築藍圖資料庫 *)
module BuildingMap = Map.Make(String);;
let building_database : building_definition BuildingMap.t ref = ref BuildingMap.empty;;

(* 範例: 簡易木棚 *)
let simple_wooden_shelter : building_definition = {
  building_id = "shelter_wood_simple"; name_cn = "簡易木棚"; description = "用木頭和茅草搭成的簡易棚屋，能勉強遮風擋雨。"; category="基礎";
  build_requirements = { materials=[("wood_log", 10); ("plant_fiber", 5)]; tools=Some ["斧頭"]; skill=Some ("crafting_basic", 1); location_tags=["平地"]; prerequisite_buildings=None };
  build_time_hours = 2.0; durability = Some 50.0; upgrades_to = Some "cottage_wood_basic";
  provides_functionality = ["休息點(效果差)", "基礎庇護"]; npc_interaction_point = false;
};;
(* let () = building_database := BuildingMap.add simple_wooden_shelter.building_id simple_wooden_shelter !building_database;; *)

let construction_process = """
  1. 玩家選擇藍圖，指定地點。
  2. 檢查地點是否符合要求(location_tags)。
  3. 檢查是否滿足前置建築(prerequisite_buildings)要求。
  4. 檢查玩家是否擁有足夠材料(materials)和所需工具(tools)。
  5. 檢查玩家技能(skill)是否達標。
  6. 開始建造，消耗材料和建造時間(build_time_hours)。
  7. (可選) 進行成功率判定（基於技能/工具/天氣），失敗可能損耗材料或延長時間。
  8. 完成後，在指定地點生成建築實體，具有相應功能和耐久度。
  9. 給予技能經驗。
"""
;;

🏕️ 建築類型範例
let building_type_examples = [
  "【基礎】: 營火, 簡易木棚, 籬笆";
  "【生產】: 工作檯, 煉藥爐, 鐵匠鋪(需升級), 農田(小塊), 畜欄, 炭窯";
  "【防禦】: 木質箭塔, 陷阱坑, 加固的寨牆/大門";
  "【生活】: 木屋, 水井, 儲藏箱/簡易倉庫, 伙房設施";
  "【特殊】: 祭壇?, 訓練假人/梅花樁?, 信鴿籠?";
]
;;

⛺ 據點管理系統（選用 - 針對黑風寨或其他玩家可控據點）
type settlement_profile_ref = { (* 引用 settlement_data.ml 中的結構 *)
  id : string; (* 據點ID, e.g., "black_wind_fortress" *)
  (* ... 引用 settlement_data.ml 中定義的 狀態/人口/士氣/階級/軍事/建設/資源/任務 等字段 ... *)
};;

let settlement_management_rules = {
  status_tracking: "需要定期更新據點內的人口、資源消耗/產出、士氣、建築狀態、任務進度等 (參考 settlement_data.ml)";
  npc_assignment: "玩家可以指派擁有特定技能的NPC到對應功能的建築工作（如指派鐵匠去鐵匠鋪）";
  resource_flow: "據點內的生產建築（農田/礦場/伐木場）產出資源，生活/軍事建築消耗資源（食物/木柴/維護費）";
  defense_mechanics: "防禦設施提供防禦加值；據點可能遭受外部攻擊（觸發戰鬥/攻城事件），損壞需要修復";
  development_path: "通過建造/升級建築、招募人才、完成據點任務來發展據點";
}
;;

⚙️ 系統互動邏輯
let construction_interaction_logic = {
[source: 133]  building_maintenance: "建築物有耐久度，會隨時間、天氣、使用或攻擊而損耗，需消耗材料修理。";
  environmental_impact: "天氣影響建築效率（雨天滅火）或造成損害（雷擊/暴風）。";
  behavioral_impact: "建築狀態影響角色/NPC行為（如無床導致睡眠質量差，無工作站無法製作）。";
  player_commands: ["[建造]", "[拆除]", "[修理]", "[升級]", "[查看據點狀況]", "[指派NPC工作]"];
}
;;

🔗 建議結合模組
let construction_depends_on = [
  "world_settings.ml";            (* 地形限制, 時間/天氣影響 *)
  "skills_proficiency.ml";        (* 建築/製作技能 *)
  "equipment.ml";                 (* 需要工具 *)
  "item_consumable_system.ml";    (* 需要建築材料 *)
  "survival_status.ml";           (* 建築提供庇護/休息點 *)
  "quest_event_system.ml";        (* 據點發展觸發任務/事件 *)
  "npc_stats_tracker.ml";         (* NPC作為勞動力/管理者 *)
  "ai_behavior_system.ml";        (* NPC與建築互動 *)
  "map_exploration_system.ml";    (* 據點在地圖上的位置和狀態 *)
  "combat_system_wuxia.ml";       (* 據點攻防戰 *)
]
;;