(* ============================================================ *)
(* ==     合併模組 Part 9: 動態劇情驅動 (Dynamic Systems)     == *)
(* ============================================================ *)

(* === Note: 📜 任務與事件模組 (quest_event_system.ml) 未找到獨立定義文件 === *)
(* ===       將使用備份指令中定義的 quest_snapshot_t 結構管理任務        === *)


(* === Content from: 🎲 動態隨機事件系統模組 (dynamic_random_event_system.ml).ini === *)
[source: 170] # 🎲 動態隨機事件系統模組 (dynamic_random_event_system.ml)

## 📘 模組說明
此模組負責在遊戲運行過程中，根據特定條件或時間觸發隨機事件，增加遊戲的不可預測性和重玩價值。事件可以是小型的環境互動、NPC 的特殊行為、突發的危機或機遇等。

---

## ⚙️ 核心機制：事件觸發與執行
```ml
(* 事件觸發檢查時機 *)
let event_check_timing = [
  "每個遊戲內時間單位結束時 (如每小時/每天)";
  "玩家進入特定地點/區域時";
  "玩家執行特定類型動作時 (如探索/休息/交易)";
  "特定遊戲狀態達成時 (如資源極低/士氣高漲/關係惡化)";
  "AI 主動注入 (作為劇情推進或調劑)";
];;

(* 事件觸發判定邏輯 *)
let event_trigger_logic = {
  base_probability = 0.05; (* 基礎觸發概率 (e.g., 每天有 5% 基礎概率觸發一個隨機事件) *)
  modifier_calculation = """
  觸發概率 = 基礎概率 * (1 + 條件修正因子總和)
  - 條件修正因子來源:
    - 時間/季節 (某些事件只在特定時間發生)
    - 地點/區域 (某些事件只在特定地點發生)
    - 玩家狀態 (高疲勞/低SAN可能觸發負面事件)
    - NPC 狀態/關係 (NPC情緒/關係緊張可能觸發衝突事件)
    - 世界狀態 (資源匱乏觸發搶奪/疾病事件?)
    - 遊戲進程/已完成任務 (解鎖後續事件)
  """;
  event_selection = "從滿足觸發條件的【事件庫】中，根據權重隨機抽取一個事件。";
  cooldown = "同一事件或同類事件在觸發後，可能會有一定的冷卻時間。";
};;

(* 事件執行流程 *)
let event_execution_flow = """
  1. 事件觸發成功，選定事件。
  2. 設置事件場景，呈現事件描述給玩家。
  3. (若有) 提供玩家選擇選項。
  4. 根據玩家選擇或事件固定效果，執行事件後果：
     - 改變角色狀態 (HP/MP/SAN/物品...)
     - 改變關係/聲望/道德
     - 觸發戰鬥
     - 開始/更新任務
     - 改變環境/地點狀態
     - 給予信息/線索
  5. 事件結束，恢復正常遊戲流程。
"""
;;

(* 事件庫結構建議 *)
type random_event_choice = {
  text: string;
  condition: string option;
  effects: string list; (* 效果標籤 *)
  next_event_id: string option;
};;

type random_event = {
  event_id: string;
  description: string;
  trigger_conditions: string list;
  weight: float; (* 抽中權重 *)
  choices: random_event_choice list option; (* 若無選項則為直接發生事件 *)
  direct_effects: string list option; (* 若無選項的直接效果 *)
  cooldown_hours: int option;
  tags: string list; (* 事件標籤 *)
};;

(* (概念性) 事件庫 - AI 需載入實際的事件庫文件內容 *)
module EventMap = Map.Make(String);;
let random_event_library : random_event EventMap.t ref = ref EventMap.empty;;

(* 範例事件結構 *)
let event_find_herb : random_event = {
  event_id = "RE_Find_Rare_Herb_01";
  description = "你在路邊的石縫中，意外發現了一株形態奇特的藥草，似乎頗為罕見。";
  trigger_conditions = ["location.tags contains '野外'", "player.skills['識草'] >= 3"];
  weight = 1.0; choices = None; direct_effects = Some ["GrantItem(herb_rare_01, 1)"];
  cooldown_hours = Some 168; (* 一周冷卻 *) tags = ["採集", "機遇", "草藥"];
};;
(* let () = (* ... 將事件加入事件庫 ... *) ();; *)

(* 範例事件庫引用 (實際應從文件夾載入) *)
let event_library_files = [
  "營寨50小事件.ini";
  "男女感情社交插曲 50事件庫.ini";
  "50個事件庫範例 (Event Library Examples).ini";
  "人才相關20事件.ini";
  "20扭轉形象機會事件庫.ini";
  (* ... 可擴展 ... *)
];;

🔗 依賴模組 (Dependencies)
let random_event_depends_on = [
  "world_settings.ml";            (* 提供時間、地點、天氣作為觸發條件 *)
  "character_attributes.ml";      (* 玩家狀態影響觸發概率和事件效果 *)
  "npc_stats_tracker.ml";         (* NPC 狀態影響觸發概率和事件效果 *)
  "reputation_system_comprehensive.ml"; (* 關係/聲望/道德作為條件或被事件影響 *)
  "quest_event_system.ml";        (* 事件可能觸發或更新任務 *)
  "item_consumable_system.ml";    (* 事件可能給予/移除物品 *)
  "combat_system_wuxia.ml";       (* 事件可能觸發戰鬥 *)
  "ai_behavior_system.ml";        (* NPC 對事件的反應 *)
  "map_exploration_system.ml";    (* 地點觸發 *)
]
;;

(* === End of Dynamic Random Event System definition === *)


(* === 🤫 流言八卦 傳播系統模組 (rumor_gossip_system_v1.2.ml) - 修正版 V1.3 === *)

(* ## 📘 模組說明
本模組負責模擬遊戲世界中流言蜚語的產生、傳播、變異和影響。它使世界更加生動，NPC 社群對玩家的行為和重大事件產生動態反應，並可能影響聲望、關係、任務觸發，甚至誤導玩家。V1.3 版本重點強化了內容生成的真實性，要求根據信息來源的確定性調整措辭。
*)

---

(* ## 📰 流言核心數據結構 (V1.3 更新) *)

(* --- 流言來源類型 --- *)
type rumor_source_t =
  | DirectWitness     (* 直接目擊 *)
  | EvidenceDiscovery (* 發現間接證據/後果 *)
  | Hearsay           (* 道聽塗說，轉述他人 *)
  | Speculation       (* 基於觀察或已有信息的猜測 *)
  | OfficialSource    (* 官方公告或命令 *)
  | Unknown           (* 來源不明 *)
;;

(* 流言條目定義 *)
type rumor_entry = {
  id : string;                      (* 流言唯一 ID *)

  (** 【核心修改】流言的文字內容。其生成邏輯（見下方說明）將嚴格遵守：
      只有當來源可靠(如 DirectWitness)、確定性高(certainty_level >= 0.8)，
      且明確知道行動者(rumor_actor_id = Some ...)時，才可使用肯定語氣指向特定人物。
      其他情況下（來源不可靠/確定性低/行動者未知），必須使用模糊、猜測、
      疑問或僅描述現象的措辭，避免無根據地歸咎於人。
  *)
  content : string;

  source_type : rumor_source_t;     (* 【新增/強調】流言來源類型 *)
  source : string option;           (* 最初信息來源描述 (NPC ID / 事件 ID / "未知" / "據說...") *)
  origin_event_id : string option;  (* 關聯的起源事件 ID *)
  topic_entity_id : string;         (* 流言主題實體 (PC ID / NPC ID / 地點 ID / 物品 ID / 事件關鍵詞) *)
  topic_category : string;          (* 主題分類 (個人行為 / 能力評價 / 情感關係 / 資源狀況 / 營寨事務 / 外部威脅 等) *)
  spread_level : string;            (* 當前傳播範圍 (本地/區域/廣泛) *)
  current_believability : float;    (* 當前可信度評估 (0.0 - 1.0), 受傳播和證據影響 *)
  certainty_level : float;          (* 【新增/強調】信息本身的確定性 (0.0 - 1.0), 不同於可信度，指信息源對內容的確信程度 *)
  veracity : string option;         (* 真實性判斷 ("屬實" / "部分屬實" / "虛假" / "未知") - GM/系統內部判斷 *)
  positive_spin_variant : string option; (* 正面演繹的版本 *)
  negative_spin_variant : string option; (* 負面演繹的版本 *)
  impact_tags : string list;        (* 流言可能產生的影響標籤 *)

  (* 【新增/細化】用於內容生成和變異的關鍵細節 *)
  rumor_action : string option;       (* 流言描述的關鍵動作/事件 *)
  rumor_actor_id : string option;     (* 流言中的行動者 (如果能相對確定) *)
  rumor_target_id : string option;    (* 流言中的目標/受影響者 *)
  rumor_location_id : string option;  (* 流言事件發生地點 *)
  key_details : (string * string) list; (* 流言包含的其他關鍵細節（用於變異和查詢） *)

  active_status : bool;             (* 是否仍在活躍傳播 *)
  creation_round : int option;      (* 產生回合數 *)
  last_spread_round : int option;   (* 上次傳播回合數 *)
};;

(* (概念性) 流言資料庫 *)
module RumorMap = Map.Make(String);;
let rumor_database : rumor_entry RumorMap.t ref = ref RumorMap.empty;;

(* 範例流言 (修正版) *)
let rumor_example_pc_feat_modified : rumor_entry = {
  id="RUMOR_911_01_MODIFIED";
  content="**【驚天傳聞！】聽那些從後山和礦洞回來的兄弟們說，咱們大當家簡直是天神下凡！有人說看到他一刀就把合抱粗的大樹給劈了，還有人說他在礦洞裡瞪一眼，石頭就自己嘩啦啦掉下來！這也太玄乎了吧？**"; (* 修改措辭，強調是“聽說”、“有人說”，語氣帶有誇張和疑問 *)
  source_type = Hearsay; (* 主要來源是口耳相傳，經過了多重加工 *)
  source=Some "嘍囉/礦工口傳(多重失真)"; origin_event_id=Some "R892/R896";
  topic_entity_id="player_azhai"; topic_category="能力評價";
  spread_level="廣泛(寨內)"; current_believability=0.4; certainty_level = 0.3; (* 來源本身確定性不高 *)
  veracity=Some "極度誇張";
  positive_spin_variant=Some "大當家真乃天神下凡，有他在此，黑風寨無憂矣！";
  negative_spin_variant=Some "大當家手段如此駭人，怕不是什麼妖魔吧？咱們跟著他真的安全嗎？";
  impact_tags=["提升PC敬畏度(神化/畏懼)", "降低嘍囉主動性?", "引發管理層不安"];
  rumor_action = Some "施展了超乎常人的力量(伐木/碎岩)"; rumor_actor_id = Some "player_azhai"; rumor_target_id = None; rumor_location_id = Some "後山/礦洞";
  key_details=[("地點","後山/礦洞");("行為","伐木/碎岩");("效果","超自然")]; active_status=true; creation_round=Some 892; last_spread_round=Some 911;
};;
(* let () = (* ... Add rumor to database ... *) ();; *)


(* --- 🔄 流言生命週期：產生、傳播與變異 (V1.3 規則說明更新) --- *)
let rumor_lifecycle = {
  generation_triggers = [
    "玩家執行了【引人注目】的行為 (成功/失敗/特殊)";
    "發生了【重大事件】 (戰鬥/建設/外交/災難/宴席)";
    "NPC 之間的【秘密互動】被窺視或泄露";
    "NPC 基於自身【情緒/關係/性格】主動散佈 (可能包含偏見或謊言)";
    "任務獎勵/懲罰中包含【散佈/澄清】流言";
    "外部傳入的信息 (罕見)";
    "**【重要】發現了某個事件的【間接證據或後果】(如屍體、失蹤、資源異常變化)**"; (* 新增強調 *)
    "**【重要】NPC 基於現有信息進行【主觀推測或聯想】**"; (* 新增強調 *)
  ];

  (** 【V1.3 核心規則：內容生成準則】**)
  content_generation_rule = """
    系統在生成 `content` 字段時，必須根據 `source_type`, `certainty_level` 和 `rumor_actor_id` 進行判斷：
    1. **高確定性 + 明確行動者:** 當來源可靠（如 DirectWitness, OfficialSource），確定性高（如 >= 0.8），且行動者明確時，內容可使用較肯定語氣描述事件和人物。
    2. **低確定性 / 未知行動者 / 猜測 / 傳聞:** 在其他所有情況下，內容**必須**使用模糊、不確定、疑問或僅描述現象的措辭。例如：
        - 使用引導詞: "聽說...", "好像...", "據說...", "有人看到...", "寨子裡都在傳..."
        - 表達不確定: "...不知道是誰幹的?", "...是不是真的?", "...怎麼回事?", "...難道是...?"
        - 側重描述現象而非歸因: "伙房少了吃的" (而不是"XX偷了吃的")；"後山有打鬥聲" (而不是"XX和XX打起來了")；"某人房裡燈亮到很晚" (而不是"某人在熬夜做某事")。
    3. **演繹版本:** `positive_spin_variant` 和 `negative_spin_variant` 字段用於記錄同一事件可能產生的不同主觀解讀，其措辭也應遵循相應邏輯。
    **【最終目標】:** 確保流言內容的呈現方式與其信息的可靠度和來源相匹配，避免在缺乏證據時做出不合理的斷言。
  """;

  spread_mechanics = { (* 傳播機制保持 V1.2 *)
    interval = "每日/每幾小時";
    method_ = "基於【地點人群密度】、【NPC社交活躍度】和【流言吸引度】進行概率性傳播";
    range_expansion = "本地 -> 區域 -> 廣泛";
    spread_probability_factors = [
      ("流言【吸引度】", "+"); ("【信息源】權威性/可信度", "+"); ("【傳播者】社交能力", "+");
      ("【地點】人群聚集度", "+"); ("【時間】流逝", "+"); ("【官方態度】", "-/+"); ("【已有反證】", "- -");
    ];
  };

  mutation_mechanics = { (* 變異機制保持 V1.2 *)
    trigger_chance_per_spread = 0.15;
    mutation_types = ["細節丟失/模糊化"; "細節誇大/扭曲"; "添加主觀臆測"; "張冠李戴"; "產生正/負面演繹"; "合併/拆分流言"];
    mutation_factors = ["傳播鏈長度"; "傳播者理解/記憶/立場"];
    mutation_outcome = "可能生成新的【變種流言條目】，或修改原流言【內容/可信度】";
  };

  fade_mechanics = { (* 衰減機制保持 V1.2 *)
    trigger_conditions = ["長時間無新傳播"; "出現強力反證"; "被官方闢謠"; "被新熱點取代"];
    fade_process = "降低活躍狀態 -> 降低可信度 -> 移出活躍庫";
  };
};;

(* --- 🎯 流言的影響與應用 (V1.2 補充) --- *)
let rumor_impacts = [
  "影響【聲望/評價】 (reputation_system)";
  "影響【人際關係】 (對流言主角或傳播者的好感/信任)";
  "影響【NPC情緒/行為】 (ai_behavior)";
  "觸發【新任務/事件】 (quest_event)";
  "提供【信息/線索】 (**可能是錯誤的!**)"; (* 強調不確定性 *)
  "塑造【公眾輿論】和【士氣】 (settlement_data)";
  "玩家可利用/散佈/澄清流言作為【策略手段】";
];;

(* --- 🔗 依賴模組 (Dependencies) --- *)
let rumor_depends_on = [
  "npc_stats_tracker.ml";
  "reputation_system_comprehensive.ml";
  "ai_behavior_system.ml";
  "quest_event_system.ml";
  "world_settings.ml";
  "emotion_psychology.ml";
  "text_generation_helper.ml"; (* (新增) 可能需要一個輔助模組來生成更自然的模糊/猜測性語句 *)
]
;;

(* === End of Rumor & Gossip System definition (V1.3 Revised) === *)


(* ============================================================ *)
(* ==   合併模組 Part 9: 動態劇情驅動 (Dynamic Systems) 結束   == *)
(* ============================================================ *)