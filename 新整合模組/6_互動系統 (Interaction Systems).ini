(* ============================================================ *)
(* ==      合併模組 Part 6: 互動系統 (Interaction Systems)     == *)
(* ==      (已整合 Stealth & Detection V1.1)                == *)
(* ============================================================ *)

(* === Content from: 💬 對話系統模組 (dialogue_system.ml).ini === *)
(* 此部分保持不變 *)

# 💬 對話系統模組 (dialogue_system.ml)

## 📘 模組說明
本模組負責定義和管理玩家角色 (PC) 與非玩家角色 (NPC) 之間的對話交互。它支持分支對話、基於條件的選項顯示、技能檢定以及通過對話觸發遊戲內效果（如關係變化、任務更新、信息獲取、事件觸發等）。

---

## ⚙️ 核心機制：對話流程引擎 (Conceptual)
```ml
(* 概念性描述 AI 如何處理對話 *)
let dialogue_flow_engine = {
  initiation_sources = ["玩家指令 ([對話] NPC)", "任務/事件觸發", "NPC 主動發起"];
  initiation_logic = "系統根據觸發條件確定對話起始節點 (start_node_id) 和參與者";

  node_processing_logic = """
  1. 讀取當前對話節點 (current_node)。
  2. **檢查節點條件 (conditions):** 若不滿足則跳轉或結束。
  3. **執行節點效果 (effects):** 如 NPC 情緒變化。
  4. **顯示 NPC 對白 (npc_line):** AI 根據情緒標籤 ([憤怒]) 調整描述。
  5. **處理玩家選項 (player_choices):**
     - 遍歷選項，檢查顯示條件 (conditions)。
     - 呈現滿足條件的選項文本 (choice_text) 及提示 (tooltip/hint)。
     - 若無選項，查找 next_node_id 自動跳轉或結束。
  """;

  choice_handling_logic = """
  1. 玩家選擇後。
  2. **執行選項效果 (effects):**
     - 技能檢定 (SkillCheck)。
     - 修改關係/聲望/道德 (ModifyRelationship/Reputation/Morality)。
     - 更新任務狀態 (UpdateQuest)。
     - 獲得/失去物品 (GrantItem/RemoveItem)。
     - 設置標記 (SetFlag)。
     - 觸發戰鬥 (TriggerCombat)。
     - 結束對話 (EndDialogue)。
  3. **跳轉到下一節點:** 根據選項指定的 next_node_id 或技能檢定結果設置新的 current_node。
  """;

  termination_conditions = ["到達無後續的節點", "選擇結束對話的選項", "外部事件中斷 (如戰鬥)"];
}
;;

🌳 對話樹數據結構 (Dialogue Tree Structure)
(* 使用 Map 或類似結構存儲對話數據 *)
module DialogueNodeMap = Map.Make(String);;
module DialogueTreeMap = Map.Make(String);;

(* 對話效果參數結構 (示例) *)
type effect_parameter =
  | Skill of string
  | Difficulty of int
  | SuccessNode of string
  | FailureNode of string
  | SuccessMessage of string option
  | FailureMessage of string option
  | TargetNPC of string
  | AffinityChange of float
  | TrustChange of float
  | RespectChange of float
  | MoralityChange of float
  | QuestID of string
  | ObjectiveID of string option
  | FlagName of string
  | FlagValue of string (* 或 bool, int 等 *)
  | EnemyGroup of string
  | ItemID of string
  | Quantity of int
  (* ... 其他可能參數 ... *)
;;

(* 對話效果結構 *)
type dialogue_effect = {
  effect: string; (* 效果類型, e.g., "SkillCheck", "ModifyRelationship", "EndDialogue" *)
  parameters: (string * effect_parameter) list option; (* 效果參數鍵值對 *)
};;

(* 玩家選項結構 *)
type player_choice = {
  choice_text: string; (* 選項顯示文本 *)
  conditions: string list; (* 顯示此選項的條件 *)
  tooltip: string option; (* (可選) 提示信息, e.g., "[需要 力量 >= 15]" *)
  next_node_id: string option; (* 選擇後跳轉的節點 ID *)
  effects: dialogue_effect list; (* 選擇此選項觸發的效果 *)
};;

(* 對話節點結構 *)
type dialogue_node = {
  node_id: string; (* 節點唯一 ID *)
  speaker: string; (* NPC ID / "PC" / "Narrator" *)
  npc_line: string; (* NPC 台詞 *)
  player_choices: player_choice list; (* 玩家選項列表 *)
  node_conditions: string list; (* 進入此節點的條件 *)
  node_effects: dialogue_effect list; (* 到達此節點觸發的效果 *)
  auto_next_node_id: string option; (* 若無玩家選項，自動跳轉的節點 ID *)
};;

(* (概念性) 對話庫 *)
let dialogue_library : dialogue_node DialogueNodeMap.t DialogueTreeMap.t ref = ref DialogueTreeMap.empty;;

(* 範例節點 (僅為結構示意) *)
let guard_greet_01_node : dialogue_node = {
  node_id = "guard_greet_01"; speaker = "npc_guard_chen";
  npc_line = "[略顯不耐煩] 站住！什麼人？報上名來，說明來意。";
  player_choices = [
    { choice_text = "在下只是路過，並無惡意。"; conditions = []; tooltip = None; next_node_id = Some "guard_question_purpose_01"; effects = [] };
    { choice_text = "[出示令牌] 我是奉大當家之命辦事。"; conditions = ["player.inventory['leader_token'] > 0"]; tooltip = Some "[需要 頭領令牌]"; next_node_id = Some "guard_respectful_01"; effects = [] };
    { choice_text = "[嘗試說服] 這位官爺行個方便..."; conditions = []; tooltip = Some "[需要 口才]"; next_node_id = None; effects = [{effect="SkillCheck"; parameters=Some [("skill", Skill "說服"); ("difficulty", Difficulty 12); ("success_node", SuccessNode "guard_soften_01"); ("failure_node", FailureNode "guard_impatient_01")]}] };
    { choice_text = "[嘗試硬闖]"; conditions = ["player.attributes.STR >= 15"]; tooltip = Some "[需要 力量 >= 15] [可能觸發戰鬥]"; next_node_id = None; effects = [{effect="TriggerCombat"; parameters=Some [("enemyGroup", EnemyGroup "gate_guards_normal")]}; {effect="EndDialogue"; parameters=None}] };
    { choice_text = "[轉身離開]"; conditions = []; tooltip = None; next_node_id = None; effects = [{effect="EndDialogue"; parameters=None}] };
  ];
  node_conditions = []; node_effects = []; auto_next_node_id = None;
};;
(* let () = (* ... 將節點加入 dialogue_library ... *) ();; *)


🧩 對話主題與觸發器 (Dialogue Topics & Triggers)
(* 可選機制，用於管理複雜對話 *)
type dialogue_topic = {
  topic_keyword: string; (* 玩家可詢問的關鍵詞 *)
  start_node_id: string; (* 對應的起始對話節點 *)
  conditions: string list; (* 談論此主題的條件 *)
  priority: int; (* (可選) 優先級 *)
};;

type contextual_trigger = {
  trigger_event: string; (* 觸發事件描述 *)
  start_node_id: string; (* 觸發的對話起始節點 *)
};;

type npc_dialogue_triggers = {
  npc_id: string;
  available_topics: dialogue_topic list; (* NPC 可談論的主題列表 *)
  contextual_triggers: contextual_trigger list; (* 情境觸發的特殊對話 *)
};;

(* (概念性) NPC 對話觸發器數據庫 *)
module NpcTriggerMap = Map.Make(String);;
let npc_dialogue_trigger_db : npc_dialogue_triggers NpcTriggerMap.t ref = ref NpcTriggerMap.empty;;

(* 範例 *)
let chenqi_triggers : npc_dialogue_triggers = {
  npc_id = "chen_qi";
  available_topics = [
    { topic_keyword="山寨情況"; start_node_id="chenqi_talk_fortress_status_01"; conditions=["player.relationship['chen_qi'].trust >= 0.5"]; priority=1 };
    { topic_keyword="你的任務"; start_node_id="chenqi_talk_tasks_01"; conditions=[]; priority=2 };
    { topic_keyword="關於上官玉"; start_node_id="chenqi_talk_shangguanyu_01"; conditions=["world.flags['ShangguanYu_Arrived'] == true"]; priority=3 };
    { topic_keyword="閒聊"; start_node_id="chenqi_smalltalk_random_01"; conditions=[]; priority=0 };
  ];
  contextual_triggers = [
    { trigger_event="player_interrupts_chenqi_scolding_subordinate"; start_node_id="chenqi_scolding_interrupted_01" };
  ];
};;
(* let () = npc_dialogue_trigger_db := NpcTriggerMap.add chenqi_triggers.npc_id chenqi_triggers !npc_dialogue_trigger_db;; *)

🔗 依賴模組 (Dependencies)
let dialogue_depends_on = [
  "npc_stats_tracker.ml";               (* 提供 NPC ID, 狀態, 關係數據 *)
  "reputation_system_comprehensive.ml"; (* 提供關係值, 聲望, 道德作為條件和效果 *)
  "emotion_psychology.ml";              (* 提供 NPC 情緒影響語氣和分支 *)
  "skills_proficiency.ml";              (* 提供技能檢定 *)
  "character_attributes.ml";            (* 提供屬性檢定 *)
  "quest_event_system.ml";              (* 提供任務狀態作為條件，觸發任務更新 *)
  "dynamic_random_event_system.ml";     (* 事件觸發特殊對話 *)
  "item_consumable_system.ml";          (* 物品欄狀態作為條件，對話給予/移除物品 *)
  "equipment.ml";                       (* 同上 *)
  "world_lore_history_system.ml";       (* 對話中涉及或揭示世界傳說 *)
  "ai_behavior_system.ml";              (* 控制 NPC 發起對話 *)
  "combat_system_wuxia.ml";             (* 對話觸發戰鬥 *)
]
;;

--- (* 分隔線 *)
---

(* === 🤫 潛行與偵測系統模組 (stealth_detection_system.ml) - 修正版 V1.1 === *)

## 📘 模組說明 (V1.1)
本模組負責計算角色執行潛行、偷竊、偷窺、暗殺等秘密行動時，被周圍 NPC 偵測到的機率和結果。其輸出結果 (`detection_result`) 將作為其他模組（尤其是聲望、AI行為、流言系統）判斷行動後果的重要依據。V1.1 版本明確了輸出結構，以便於聲望系統應用「無目擊則無公開後果」規則。

---

## 🕵️ 核心數據結構 (V1.1 新增/定義)

type stealth_action_type = (* 潛行相關的行動類型 *)
  | MoveStealthily (* 潛行移動 *)
  | Pickpocket (* 偷竊 *)
  | Eavesdrop (* 偷聽 *)
  | Peeking (* 偷窺 *)
  | Lockpicking (* 開鎖 *)
  | TrapDisarming (* 拆除陷阱 *)
  | AssassinationAttempt (* 暗殺嘗試 *)
  | Hiding (* 躲藏 *)
  | Sabotage (* 破壞 *)
;;

type detection_result = { (* V1.1 核心輸出 *)
  detected : bool;             (* 行動是否被至少一個 NPC 偵測到 *)
  witness_ids : string list;   (* 偵測到行動的 NPC ID 列表 *)
  detection_level : float;     (* 被偵測的清晰程度 (0.0 - 1.0), 影響後續反應強度 *)
  evidence_left : string list; (* 行動留下的物理證據描述 (例如："泥地上的腳印", "被撬動的門鎖痕跡") *)
  notes: string option;        (* 額外說明，例如“僅聽到聲音但未見人影” *)
};;

---

## ⚙️ 潛行狀態管理 (Stealth State Management)
(* 保留自 Base File *)
let stealth_rules = {
  enter_stealth = {
    command = "[潛行]";
    prerequisites = ["非戰鬥狀態"; "非重傷/極度疲勞"];
    effects = ["移動速度降低", "獲得潛行成功率加成", "體力消耗可能增加", "設置 player.status.isStealth = true"];
  };
  exit_stealth = {
    triggers = ["主動指令[停止潛行]", "執行奔跑/攻擊/嘈雜動作", "被完全偵測(Detected)"];
    effects = ["恢復正常移動速度", "失去潛行加成", "設置 player.status.isStealth = false"];
  };
}
;;

---

## 🧠 潛行偵測計算邏輯 (Stealth Detection Calculation Logic - V1.1 核心)

(* 概念性描述如何計算偵測結果 *)
let stealth_detection_calculation_logic = {

  (** 主要功能：檢測潛行行動 (check_detection)
      輸入:
        - actor_id: 行動者 ID (e.g., "player_azhai")
        - action_type: 執行的秘密行動類型 (來自 stealth_action_type)
        - actor_stealth_skill: 行動者的相關潛行綜合能力值 (float)
        - target_id: 行動目標 ID (string option)
        - environment_factors: 環境因素列表 (e.g., [("光照度", 0.2); ("噪音水平", 0.8); ("遮蔽物", 0.6)])
        - observers: 潛在觀察者列表，含其ID和綜合感知能力值 ( (string * float) list )
      輸出:
        - detection_result: 包含偵測結果的記錄
  *)
  check_detection_process = """
  1. **計算基礎成功率 (Base Success Chance):**
     - 根據行動類型 (action_type) 設置基礎難度。
     - 主要受行動者潛行能力 (actor_stealth_skill) 影響。
     - 受環境因素修正 (光照低+, 噪音大+, 遮蔽物多+)。

  2. **遍歷所有潛在觀察者 (observers):**
     - 對每個觀察者，計算其【偵測對抗檢定】。
     - 檢定受以下因素影響：
       * 觀察者的感知能力 (observer_perception_skill)。
       * 觀察者與行動者的距離。
       * 觀察者的注意力狀態 (警惕/分心)。
       * 環境因素對觀察者的影響 (光照低-, 噪音大-)。
       * 行動者潛行能力 vs 觀察者感知能力的對抗。
       * 行動類型本身的暴露風險 (action_type specific risk)。
     - 若檢定失敗 (即觀察者成功偵測)，記錄觀察者 ID 到 witness_ids 列表。
     - 根據檢定成功的程度，更新 overall_detection_level (取最高值)。

  3. **判斷是否留下物理證據 (evidence_left):**
     - 根據行動類型 (action_type) 和環境決定。 (e.g., Lockpicking -> 門鎖痕跡, 雪地 MoveStealthily -> 腳印)
     - 將描述性字串加入 evidence_left 列表。

  4. **綜合結果:**
     - 根據 witness_ids 是否為空設置 detected (true/false)。
     - 根據 detection_level 添加可能的 notes (e.g., "似乎被察覺了動靜")。
     - 返回包含所有計算結果的 detection_result 記錄。
  """;

  calculation_notes = "(* 具體公式和閾值需要根據遊戲平衡性仔細設計和調整 *)";
}
;;

---

## 📊 影響潛行與偵測的因素 (Factors Influencing Stealth & Detection)
(* 保留自 Base File，與 V1.1 計算邏輯一致 *)
let stealth_success_factors = {
  positive = ["高[潛行]技能", "高[AGI]", "輕便/深色裝備", "黑暗/陰影/濃霧/大雨", "利用遮蔽物", "緩慢移動", "目標非警戒", "距離遠"];
  negative = ["低[潛行]技能", "笨重/發光/亮色裝備", "光照充足/空曠", "快速移動/執行明顯動作", "目標警戒/搜索", "距離近"];
}
;;
let detection_success_factors = {
  positive = ["高[觀察]技能", "高感知屬性(INT?)", "NPC警戒/搜索", "光照充足(視覺)", "環境安靜(聽覺)", "距離近", "目標行動明顯/有噪音", "特殊偵測能力"];
  negative = ["低[觀察]技能", "NPC分心/疲勞/睡眠", "黑暗/濃霧/大雨(視覺)", "環境嘈雜(聽覺)", "距離遠", "目標利用遮蔽/偽裝"];
}
;;

---

## 👁️ 偵測等級與後果 (Detection Levels & Consequences)
(* 保留自 Base File *)
type detection_level_status = Unaware | Suspicious | Alert | Detected;; (* 重命名以區分 detection_result.detection_level (float) *)

let detection_level_definitions = [
  (Unaware, "未察覺: NPC完全不知情。潛行者行動自由。");
  (Suspicious, "懷疑: NPC察覺異常（聲音/陰影），但不確定來源/威脅。後果：可能轉向/前往可疑點進行短暫【主動偵測】。若無發現則可能恢復Unaware。");
  (Alert, "警戒: NPC確認附近有威脅，但不確定位置。後果：進入高度警戒，拔出武器，可能示警，在區域內進行更徹底的【主動偵測/搜索】。");
  (Detected, "已發現: NPC確定潛行者位置和身份。後果：潛行解除！觸發戰鬥/呼叫援軍/嘗試抓捕/逃跑（由AI行為模組決定）。");
]
;;

let detection_state_transition = {
  escalation = "檢定結果 (以及 detection_result.detection_level) 決定狀態是否提升 (Unaware -> Suspicious -> Alert -> Detected)。";
  de_escalation = "若潛行者長時間保持隱蔽且未被進一步發現，警戒狀態可能隨時間降低 (Alert -> Suspicious -> Unaware)。";
}
;;

---

## 🔪 潛行攻擊 (Sneak Attack)
(* 保留自 Base File *)
let sneak_attack_rules = {
  trigger_conditions = ["玩家處於潛行狀態", "目標NPC處於 Unaware 或 Suspicious 狀態"];
  effects = [ (* 效果傳遞給 combat_system_wuxia.ml *)
    "獲得一次攻擊加成 (必定命中? / 提高暴擊率? / 額外傷害?)";
    "可能使目標首回合措手不及 (無法格擋/閃避?)";
  ];
  consequences = "發動潛行攻擊通常立刻解除潛行狀態，並驚動周圍NPC進入 Alert 或 Detected 狀態。";
}
;;

---

## 🔗 依賴模組 (Dependencies)
(* 保留自 Base File，與 V1.1 內容一致 *)
```ml
let stealth_depends_on = [
  "skills_proficiency.ml";        (* [潛行] 和 [觀察] 技能 *)
  "character_attributes.ml";      (* AGI, INT 等屬性 *)
  "equipment.ml";                 (* 裝備影響噪音/可見度 *)
  "map_exploration_system.ml";    (* 區域環境信息 (遮蔽、地形) *)
  "world_settings.ml";            (* 光照、天氣 *)
  "npc_stats_tracker.ml";         (* NPC 觀察技能、屬性、狀態 *)
  "ai_behavior_system.ml";        (* NPC 警覺狀態、反應行為 *)
  "combat_system_wuxia.ml";       (* 潛行攻擊效果、被發現後進入戰鬥 *)
  "reputation_system_comprehensive.ml"; (* 【V1.1 關聯】輸出 detection_result 給聲望系統 *)
  "rumor_gossip_system.ml";       (* 【V1.1 關聯】根據 detection_result 觸發流言 *)
  (* "special_abilities.ml", *)   (* (可選) 特殊偵測能力 *)
]
;;

(* **【V1.1 註釋】** 本模組的核心職責是判斷【是否被發現】以及【被誰發現/留下何種證據】。
   其輸出的 `detection_result` 中的 `detected` 和 `evidence_left` 字段，
   將被【綜合聲望與評價系統模組】用於判斷是否對未被發現的負面行為施加公開的道德/聲望懲罰，
   並可能影響【流言系統】是否生成相關傳聞。
*)

(* ============================================================ *)
(* ==    合併模組 Part 6: 互動系統 (Interaction Systems) 結束   == *)
(* ============================================================ *)