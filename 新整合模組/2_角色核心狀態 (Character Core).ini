(* ============================================================ *)
(* ==      合併模組 Part 2: 角色核心狀態 (Character Core)     == *)
(* ============================================================ *)

(* === Content from: 🧬 角色屬性與狀態模組 (character_attributes.ml).ini === *)
(* Note: This file appears to contain definitions for Base Attributes, Status, Survival, Disease/Injury, and Emotion/Psychology, as well as NPC profile structure additions *)

[source: 194] # 🧬 角色屬性與狀態模組 (character_attributes.ml)

## 📘 模組說明
此模組定義所有NPC角色的核心能力、狀態值、背景資料、經驗成長與限制條件。支援多樣化角色扮演與真實模擬互動。(也包含PC的核心屬性定義)

---

## 🧍‍♂️ 角色基礎能力值（Attributes）
```ml
(* 適用於 PC 和 NPC 的基礎能力值 *)
type character_attributes = {
  str: int; (* 力量 *)
  agi: int; (* 敏捷 *)
  int_: int; (* 智力 *)
  cha: int; (* 魅力 *)
  lck: int; (* 幸運 *)
  (* 可選擴展: *)
  (* con: int; (* 體質 - 影響HP、抗性、耐力恢復? *) *)
  (* wis: int; (* 感知/意志 - 影響察覺、精神抗性? *) *)
  (* gen_gu: int option; (* 根骨 (隱藏/概念屬性) *) *)
  (* wu_xing: int option; (* 悟性 (隱藏/概念屬性) *) *)
};;

(*
屬性說明:
  - 力量 (STR): 影響近戰物理傷害、負重上限、部分體力消耗動作效率（如搬運、破壞）、外功修煉潛力。
  - 敏捷 (AGI): 影響命中率、閃避率、攻擊/行動速度、潛行成功率、輕功效果、遠程武器精準度、部分精細手藝成功率。
  - 智力 (INT): 影響技能學習速度（尤其知識/內功）、MP上限？、計謀/策略效果、知識型技能等級上限與效果（醫毒、機關、陣法）、魔法/精神抗性？、悟性潛力。
  - 魅力 (CHA): 影響說服、交易、領導力、馴獸等社交技能效果、NPC初始反應、藝術表演效果。
  - 幸運 (LCK): 影響所有機率事件（暴擊、閃避修正、掉落、採集稀有品、頓悟、避開意外）。

屬性獲取與成長:
  - 初始值：角色創建時分配或根據背景生成。
  - 成長：可通過升級獲得屬性點分配、完成特定任務獎勵、使用特殊物品、經歷奇遇、修煉特定功法等方式提升。
*)

(* 核心狀態值 *)
type core_status_values = {
  hp : float; (* 生命值 *)
  max_hp : float;
  mp : float; (* 內力值/法力值 *)
  max_mp : float;
  sta : float; (* 體力值/耐力值 *)
  max_sta : float;
  san : float option; (* 理智值/心境值 (可選啟用) *)
  max_san : float option;
};;

(* 生存相關狀態值 - 來自 survival_status.ml 規則整合 *)
type survival_status_values = {
  hunger : float option; (* 飢餓值 (0=飽腹, 100=極餓) *)
  max_hunger : float option;
  thirst : float option; (* 口渴值 (0=濕潤, 100=極渴) *)
  max_thirst : float option;
  fatigue : float option; (* 疲勞值 (0=精神, 100=力竭) *)
  max_fatigue : float option;
  (* 可選: temperature: float option; (* 體溫 *) *)
  (* 可選: cleanliness: float option; (* 清潔度 *) *)
};;

(* 傷害與疾病相關狀態 - 來自 disease_injury_system.ml 規則整合 *)
type health_condition_flags = {
  active_injuries: string list; (* e.g., ["刀傷(左臂, 中度)", "骨折(右腿, 嚴重)"] *)
  active_diseases: string list; (* e.g., ["風寒", "瘟疫(潛伏期)"] *)
  active_poisons: string list; (* e.g., ["蛇毒(持續損血)", "腐屍毒(屬性下降)"] *)
  bleeding: bool; (* 是否正在流血 *)
  internal_qi_disorder: bool; (* 內力是否紊亂 *)
  permanent_disability: string list; (* 永久性殘疾 *)
};;

(* 情緒心理相關狀態 - 來自 emotion_psychology.ml 規則整合 *)
type mental_status = {
  current_emotion: string; (* 主要情緒, e.g., "平靜", "焦慮(高)", "狂喜" *)
  mental_load: int option; (* 心理負荷/壓力值 (0-100) *)
  active_mental_effects: string list; (* e.g., ["心神不寧", "鬥志高昂", "恐懼"] *)
};;

(* 其他狀態 *)
type other_status_flags = {
  is_stealth: bool; (* 是否處於潛行狀態 *)
  is_mounted: bool; (* 是否騎乘坐騎 *)
  is_wet: bool; (* 是否濕透 *)
  is_cold: bool; (* 是否感到寒冷 *)
  is_hot: bool; (* 是否感到炎熱 *)
  weight_status: string; (* 負重狀態: "正常", "超重", "嚴重超重" *)
  (* ... 可根據需要擴展 ... *)
};;

(* --- 以下為 survival_status.ml 的詳細規則 --- *)
[source: 176] (*# 🧍 生存狀態模組 (survival_status.ml) - 規則細化 *)

(* ## 🍞 飢餓系統（Hunger） *)

let hunger_value : int ref = ref 0;; (* 0-100, 100為極度飢餓 *)
let hunger_increase_rate = { base_points_per_interval = 10; interval_hours = 4; activity_modifier = true; };;
let buffering_mechanism = {
  description = "角色的當前體力值(STA)可以提供抵抗力，提高觸發負面效果的實際閾值。";
  scale_sta_to_attribute_range = (fun (current_sta: int) (max_sta: int) ->
      let scaled_value = (float_of_int current_sta /. float_of_int max_sta) *. 20.0 in
      max 0 (min 20 (int_of_float scaled_value))
      );
  debuff_threshold_modifier = (fun (base_threshold: int) (current_sta: int) (max_sta: int) ->
      let scaled_sta = scale_sta_to_attribute_range current_sta max_sta in
      let buffer_bonus = max 0 ((scaled_sta - 10) / 2) in
      base_threshold + buffer_bonus);
  notes = "STA 500 時提供 +5 閾值加成。此加成隨 STA 下降而減弱。";
};;
let hunger_debuffs_cumulative_percent = {
  description = "飢餓感會持續累加地降低屬性百分比 (力量 -> 敏捷 -> 智力)，屬性最低降至 1。";
  starting_threshold_fatigue_accel = 40;
  starting_threshold_str_penalty = 60;
  starting_threshold_agi_penalty = 80;
  starting_threshold_int_penalty = 90;
  penalty_interval = 5;
  penalty_percent_per_step = 2.0;
  minimum_attribute_value = 1;
  calculate_effects = (fun (current_hunger: int) (base_attributes: character_attributes) (current_sta: int) (max_sta: int) ->
    let effective_threshold = buffering_mechanism.debuff_threshold_modifier in
    let effects = ref [] in
    let actual_fatigue_thresh = effective_threshold starting_threshold_fatigue_accel current_sta max_sta in
    let actual_str_thresh = effective_threshold starting_threshold_str_penalty current_sta max_sta in
    let actual_agi_thresh = effective_threshold starting_threshold_agi_penalty current_sta max_sta in
    let actual_int_thresh = effective_threshold starting_threshold_int_penalty current_sta max_sta in
    if current_hunger >= actual_fatigue_thresh then effects := "疲勞累積速度增加(+10% ~ +20%)" :: !effects;
    if current_hunger >= 65 then effects := "情緒易怒(概率增加)" :: !effects;
    let str_steps = max 0 ((current_hunger - actual_str_thresh) / penalty_interval) in
    let str_penalty_percent = float_of_int str_steps *. penalty_percent_per_step /. 100.0 in
    let effective_str = max minimum_attribute_value (int_of_float (float_of_int base_attributes.str *. (1.0 -. str_penalty_percent))) in
    if str_penalty_percent > 0.0 then effects := (Printf.sprintf "力量(STR) 效果降低 %.0f%% (當前生效值: %d)" (str_penalty_percent *. 100.0) effective_str) :: !effects;
    if current_hunger >= actual_str_thresh + 10 then effects := "體力(STA)恢復速度降低(-20% ~ -40%)" :: !effects;
    if current_hunger >= 75 then effects := "重體力勞動/攻擊檢定增加難度" :: !effects;
    let agi_steps = max 0 ((current_hunger - actual_agi_thresh) / penalty_interval) in
    let agi_penalty_percent = float_of_int agi_steps *. penalty_percent_per_step /. 100.0 in
    let effective_agi = max minimum_attribute_value (int_of_float (float_of_int base_attributes.agi *. (1.0 -. agi_penalty_percent))) in
    if agi_penalty_percent > 0.0 then effects := (Printf.sprintf "敏捷(AGI) 效果降低 %.0f%% (當前生效值: %d)" (agi_penalty_percent *. 100.0) effective_agi) :: !effects;
    if current_hunger >= actual_agi_thresh then effects := "無法【奔跑】/【高強度】動作" :: !effects;
    if current_hunger >= 85 then effects := "精細動作檢定增加難度" :: !effects;
    let int_steps = max 0 ((current_hunger - actual_int_thresh) / penalty_interval) in
    let int_penalty_percent = float_of_int int_steps *. penalty_percent_per_step /. 100.0 in
    let effective_int = max minimum_attribute_value (int_of_float (float_of_int base_attributes.int_ *. (1.0 -. int_penalty_percent))) in
    if int_penalty_percent > 0.0 then effects := (Printf.sprintf "智力(INT) 效果降低 %.0f%% (當前生效值: %d)" (int_penalty_percent *. 100.0) effective_int) :: !effects;
    if current_hunger >= actual_int_thresh then effects := "專注困難(學習/施法檢定懲罰)" :: !effects;
    if current_hunger >= 95 then effects := "可能出現【幻覺】(需SAN檢定)" :: !effects;
    if current_hunger >= 95 then effects := "【昏厥】風險(低)增加" :: !effects;
    List.rev !effects
  );
};;
let hunger_recovery_methods = { description = "通過進食恢復。"; factors = ["食物類型", "食物質量"]; };;

(* ## 💧 口渴系統（Thirst） *)

let thirst_value : int ref = ref 0;;
let thirst_increase_rate = { base_points_per_interval = 8; interval_hours = 2; weather_modifier = true; activity_modifier = true; };;
let thirst_debuffs_cumulative_percent = {
  description = "口渴感持續累加地降低屬性百分比 (智力 -> 敏捷 -> 魅力)，屬性最低降至 1。";
  starting_threshold_cha_penalty = 40;
  starting_threshold_int_penalty = 60;
  starting_threshold_agi_penalty = 75;
  starting_threshold_sta_cost_increase = 80;
  penalty_interval = 5;
  penalty_percent_per_step = 2.0;
  minimum_attribute_value = 1;
  calculate_effects = (fun (current_thirst: int) (base_attributes: character_attributes) (current_sta: int) (max_sta: int) ->
    let effective_threshold = buffering_mechanism.debuff_threshold_modifier in
    let effects = ref [] in
    let actual_cha_thresh = effective_threshold starting_threshold_cha_penalty current_sta max_sta in
    let actual_int_thresh = effective_threshold starting_threshold_int_penalty current_sta max_sta in
    let actual_agi_thresh = effective_threshold starting_threshold_agi_penalty current_sta max_sta in
    let actual_sta_cost_thresh = effective_threshold starting_threshold_sta_cost_increase current_sta max_sta in
    let cha_steps = max 0 ((current_thirst - actual_cha_thresh) / penalty_interval) in
    let cha_penalty_percent = float_of_int cha_steps *. penalty_percent_per_step /. 100.0 in
    let effective_cha = max minimum_attribute_value (int_of_float (float_of_int base_attributes.cha *. (1.0 -. cha_penalty_percent))) in
    if cha_penalty_percent > 0.0 then effects := (Printf.sprintf "魅力(CHA) 效果降低 %.0f%% (當前生效值: %d, 口才受阻)" (cha_penalty_percent *. 100.0) effective_cha) :: !effects;
    let int_steps = max 0 ((current_thirst - actual_int_thresh) / penalty_interval) in
    let int_penalty_percent = float_of_int int_steps *. penalty_percent_per_step /. 100.0 in
    let effective_int = max minimum_attribute_value (int_of_float (float_of_int base_attributes.int_ *. (1.0 -. int_penalty_percent))) in
    if int_penalty_percent > 0.0 then effects := (Printf.sprintf "智力(INT) 效果降低 %.0f%% (當前生效值: %d)" (int_penalty_percent *. 100.0) effective_int) :: !effects;
    if current_thirst >= actual_int_thresh then effects := "內力(MP)恢復速度降低(-20% ~ -50%)" :: !effects;
    if current_thirst >= actual_int_thresh + 10 then effects := "施法/專注技能成功率降低" :: !effects;
    let agi_steps = max 0 ((current_thirst - actual_agi_thresh) / penalty_interval) in
    let agi_penalty_percent = float_of_int agi_steps *. penalty_percent_per_step /. 100.0 in
    let effective_agi = max minimum_attribute_value (int_of_float (float_of_int base_attributes.agi *. (1.0 -. agi_penalty_percent))) in
    if agi_penalty_percent > 0.0 then effects := (Printf.sprintf "敏捷(AGI) 效果降低 %.0f%% (當前生效值: %d)" (agi_penalty_percent *. 100.0) effective_agi) :: !effects;
    if current_thirst >= actual_agi_thresh + 5 then effects := "動作遲緩/笨拙" :: !effects;
    if current_thirst >= actual_sta_cost_thresh then effects := "體力(STA)消耗增加(+20% ~ +40%)" :: !effects;
    if current_thirst >= 85 then effects := "說話含混不清/困難" :: !effects;
    if current_thirst >= 90 then effects := "視野模糊(觀察懲罰)" :: !effects;
    if current_thirst >= 95 then effects := "【昏厥】風險(中)增加" :: !effects;
    List.rev !effects
  );
};;
let thirst_recovery_methods = { description = "通過飲用液體恢復。"; factors = ["液體類型 (水/酒/湯)", "液體清潔度"]; };;

(* ## 💤 睡眠與疲勞系統（Sleep / Fatigue - V2.5 調整後速率） *)

let fatigue_value : int ref = ref 0;; (* 0-100 *)
let fatigue_increase_rate = {
  base_points_per_hour = 1.5; (* 靜止每小時+1.5 *)
  activity_multiplier = { resting = 0.5; light_activity = 1.0; moderate_activity = 1.5; heavy_activity = 2.5; };
  state_modifier = {
    hunger_modifier = (fun h -> if h >= 80 then 1.5 else if h >= 60 then 1.2 else 1.0);
    thirst_modifier = (fun t -> if t >= 80 then 1.7 else if t >= 60 then 1.3 else 1.0);
    injury_modifier = (fun i -> match i with | `Minor` -> 1.1 | `Severe` -> 1.4 | _ -> 1.0);
  };
};;
let fatigue_debuffs = [
  { threshold = 70; description = "【重度疲勞】"; effects = ["所有技能檢定受到【中等】懲罰", "專注力下降", "STA 恢復速度降低 (-30%)", "**降低STA緩衝效果(閾值加成減半?)**"] };
  { threshold = 90; description = "【極度疲憊】"; effects = ["所有技能檢定受到【嚴重】懲罰", "無法進行【奔跑】等劇烈活動", "可能出現【幻覺】(需 SAN 檢定)", "**有【強制昏睡】風險** (需意志/體質檢定，高疲勞增加檢定難度)"] };
];;
let fatigue_recovery_methods = {
  description = "主要通過睡眠恢復疲勞值。";
  sleep_efficiency = {
    base_recovery_per_hour = 15;
    quality_modifiers = [ ("環境(安全/舒適)", 1.2); ("環境(危險/惡劣)", 0.7); ("狀態(無傷病/飽腹)", 1.1); ("狀態(重傷/飢渴)", 0.6); ("狀態(心神不寧/SAN低)", 0.8); ("物品(安神香?)", 1.0..1.5); ];
    min_sleep_hours_for_full_recovery = 6;
  };
  other_methods = ["短暫休息(效果微弱)", "特定藥物/食物"];
};;

(* ## 🚽 排泄與身體潔淨系統（選用 - Placeholder） *)
let hygiene_system_optional = { enabled = false; basic_consequences_if_enabled = ["長時間不清潔可能降低 CHA", "極端骯髒可能增加疾病風險"]; };;

(* ## ⛺ 環境交互與消耗變化 (Environment & Stacking - V2.5) *)
let environment_interaction = {
  weather_impact: [ "【炎熱/乾燥】: 加速口渴，增加疲勞。"; "【寒冷】: 增加疲勞，可能產生【寒冷】狀態。"; "【雨/雪/霧】: 影響視野、移動速度，增加寒冷/潮濕風險。" ];
  activity_impact: "活動強度直接影響疲勞累積速率，並間接影響飢餓和口渴的累積速率。";
};;
let status_stacking_effects = {
  description = "多種負面生存狀態疊加時，效果會加劇。";
  examples = [ "【飢餓 + 口渴】: 屬性懲罰疊加，疲勞累積更快，昏厥風險增加。"; "【疲勞 + 飢渴】: 降低STA緩衝效果，增加昏迷檢定難度，更容易出現幻覺。"; "【傷病 + 生存危機】: 大幅降低恢復速度，可能加速狀態惡化。" ];
  cross_module_interaction: "AI 需在判定時綜合考慮所有生效的負面狀態及其疊加效果。";
};;


(* --- 以下為 disease_injury_system.ml 的詳細規則 --- *)
[source: 144] (*# 💉 傷害與疾病模組（disease_injury_system.ml）*)

(* ## 🩸 傷害類型 *)
type injury_type = Wound | Internal | Poison | Bleeding | Disease;;
let injury_effects = [
  (Wound, "刀傷、槍傷、骨折，降低 STR／AGI／行動能力");
  (Internal, "氣血不順、臟器損傷，影響技能發動與 MP/內力恢復");
  (Poison, "毒素潛伏，每回合/定時損傷 HP／SAN 或降低屬性");
  (Bleeding, "未止血時每回合持續損血");
  (Disease, "感冒、發燒、疫病，影響整體狀態與傳染風險");
];;

(* ## 💊 治療系統 *)
let treatment_methods = {
  item_based: ["藥草(不同種類對應不同傷病)", "傷藥(通用外傷)", "內服解毒丸", "特殊丹藥"];
  skill_based: ["醫術技能", "點穴療傷", "內力療傷", "特殊解毒功法"];
  environment_based: ["診所/藥鋪", "療養地", "特定設施(如藥浴?)"];
};;

(* ❤️ 健康狀態標記（Health Flags）*)
let health_flags = [
  "【輕傷】: HP 80%+, 行動略受影響";
  "【重傷】: HP 40%~79%, 屬性顯著下降，需治療";
  "【瀕死】: HP 10%~39%, 無法戰鬥，移動困難";
  "【昏迷】: HP < 10%, 失去意識";
  "【殘疾】: 永久性損傷（如斷肢），影響特定能力";
  "【染疫】: 帶有傳染性疾病";
  "【內力紊亂】: 無法順暢運功";
  "【中毒】: 體內有毒素";
  "【流血】: 持續失血";
];;

(* 🩺 醫療與恢復邏輯 *)
let healing_recovery_logic = {
  natural_recovery: "輕微外傷/疲勞可隨時間緩慢恢復（需休息且無惡化因素）。內傷/重傷/中毒/疾病需特定治療。";
  treatment_check: "成功率 = 施救者[醫術/相關技能等級] + 藥品質量/工具加成 + (受助者體質/根骨加成?) - 傷病嚴重度/複雜度 + d20。";
  failure_consequences: ["治療無效", "傷勢惡化", "產生副作用", "浪費藥品"];
  long_term_effects: ["舊傷復發 (天氣變化/過度勞累觸發)", "永久後遺症 (屬性降低/特定活動受限)", "免疫力變化 (痊癒後可能獲得短暫抗性)"];
};;


(* --- 以下為 emotion_psychology.ml 的詳細規則 --- *)
[source: 129] (*# 🎭 情緒與心理模組（emotion_psychology.ml）*)

let emotion_system = {
  current_emotion: string ref; (* e.g., "平靜", "焦慮(高)", "狂喜", "悲傷(中)", "憤怒(低)" *)
  emotion_intensity: int ref; (* 0-100 *)
  mental_load: int ref; (* 心理負荷/壓力值 0-100 *)

  threshold_settings: {
    calm_zone: 0..20;
    normal_zone: 21..60;
    agitated_zone: 61..80; (* 風險區域 *)
    breakdown_zone: 81..100; (* 爆發區域 *)
  };

  breakdown_triggers_and_effects = {
    trigger_conditions: ["mental_load >= 80 持續一段時間", "SAN 值 < 臨界值 (e.g., 200?)", "遭受重大精神衝擊事件"];
    possible_reactions: [
      "【行為失常】: 非理性攻擊、逃跑、語無倫次、重複無意義動作 (參考ai_behavior)";
      "【情緒爆發】: 大哭、大笑、暴怒 (影響社交)";
      "【精神崩潰】: 臨時 SAN 值大幅降低，可能陷入【昏厥】或【恐懼】狀態";
      "【屬性懲罰】: 短時間內 INT, CHA, LCK 大幅降低";
    ];
    recovery_conditions: ["脫離壓力源", "成功休息/睡眠", "使用安神藥物/技能", "得到他人有效安撫/疏導"];
    post_breakdown_state: "{ name = '精神脆弱'; duration = '1d4 小時'; effect = 'SAN恢復速度降低, 易受驚嚇' }";
  };

  mood_influences: [ (* 情緒如何影響其他系統 *)
    "影響【對話選項】和【NPC反應】 (dialogue_system, ai_behavior)";
    "影響【技能檢定】成功率 (如 憤怒時力量+, 冷靜時智力+, 恐懼時敏捷- )";
    "影響【學習效率】 (心煩意亂時效率降低)";
    "影響【SAN值】變化 (長期負面情緒降低SAN)";
    "影響【關係變化】 (惡劣情緒下更容易惡化關係)";
  ];

  emotion_change_factors: [ (* 什麼因素會改變情緒 *)
    "遊戲事件結果 (成功/失敗, 獲益/損失)";
    "NPC互動 (友好/敵對, 安撫/激怒)";
    "自身狀態 (傷病/飢渴/疲勞)";
    "環境氛圍 (安全/危險, 壓抑/祥和)";
    "天氣/時間";
    "記憶/回憶觸發";
    "攝入物品 (酒/藥物)";
  ];
};;


(* --- 以下為 npc_stats_tracker.ml 中關於 NPC Profile 的補充定義 --- *)
[source: 192] (* Modifications/Additions for npc_profile_t *)

type npc_profile_t = { (* 補充或細化 NPC 數據結構 *)
  (* ... id, name 等基礎信息 ... *)

  basic_info : {
    surname: string option; (* 姓氏 *)
    given_name: string option; (* 名字 *)
    nickname: string option; (* 綽號 *)
    generation: int option; (* 輩分 *)
    hometown_id: string option; (* 籍貫 *)
    occupation_identity : string; race : string; faction_or_sect : string option; estimated_age : string;
    personality_traits : string list };

  (* ... current_state, appearance_description, relationships, knowledge, abilities, equipment_and_items, conditions, memory_tags, reputation_and_alignment, estimated_base_attributes ... *)

  clan_id: string option; (* 所屬宗族/家族 ID *)
  known_kinship_links: (string * string * float) list option; (* 已知的親緣關係列表 (NPC_ID, 關係類型, 親密度) *)
  potential_family_talent: string option; (* 潛在的家族特殊天賦 *)

  trait_tags : string list;
  assigned_tasks : quest_snapshot_t list option;
};;


(* ============================================================ *)
(* ==     合併模組 Part 2: 角色核心狀態 (Character Core) 結束 == *)
(* ============================================================ *)